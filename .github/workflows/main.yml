name: Main

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["*"]

jobs:
  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: make prereq

      - name: Lint code
        run: make lint

      - name: Run unit tests
        env:
          TEST_SCHEMA_URI: "https://github.com/elastic/ecs/archive/refs/tags/v8.1.0.tar.gz"
          TEST_DETECTION_RULES_URI: "https://github.com/elastic/detection-rules/archive/refs/tags/v8.1.0.tar.gz"
        run: make tests

  online-tests:
    strategy:
      matrix:
        include:
          - stack-version: "7.15.0"
            schema-uri: "https://github.com/elastic/ecs/archive/refs/tags/v8.1.0.tar.gz"
            detection-rules-uri: "https://github.com/elastic/detection-rules/archive/refs/tags/v8.1.0.tar.gz"
            python-version: "3.8"
            os: "ubuntu-18.04"

          - stack-version: "8.1.2"
            schema-uri: "https://github.com/elastic/ecs/archive/refs/tags/v8.1.0.tar.gz"
            detection-rules-uri: "https://github.com/elastic/detection-rules/archive/refs/tags/v8.1.0.tar.gz"
            python-version: "3.10"
            os: "ubuntu-latest"

    name: Online tests (${{ matrix.stack-version }})
    runs-on: ${{ matrix.os }}
    needs: unit-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: make prereq

      - name: Setup cache
        id: elastic-stack-cache
        uses: actions/cache@v2
        with:
          key: elastic-stack-${{ matrix.stack-version }}
          path: ~/elastic-stack-cache

      - name: Reuse Elastic Stack ${{ matrix.stack-version }} Docker images
        if: steps.elastic-stack-cache.outputs.cache-hit == 'true'
        run: |
          zcat ~/elastic-stack-cache/elasticsearch-${{ matrix.stack-version }}.tar.gz | docker load
          zcat ~/elastic-stack-cache/kibana-${{ matrix.stack-version }}.tar.gz | docker load

      - name: Pull Elastic Stack ${{ matrix.stack-version }} Docker images
        if: steps.elastic-stack-cache.outputs.cache-hit != 'true'
        env:
          TEST_STACK_VERSION: ${{ matrix.stack-version }}
        run: |
          mkdir ~/elastic-stack-cache
          docker compose pull -q
          docker save docker.elastic.co/elasticsearch/elasticsearch:${{ matrix.stack-version }} | \
            gzip -c > ~/elastic-stack-cache/elasticsearch-${{ matrix.stack-version }}.tar.gz
          docker save docker.elastic.co/kibana/kibana:${{ matrix.stack-version }} | \
            gzip -c > ~/elastic-stack-cache/kibana-${{ matrix.stack-version }}.tar.gz

      - name: Start Elastic Stack ${{ matrix.stack-version }}
        env:
          TEST_STACK_VERSION: ${{ matrix.stack-version }}
        run: docker compose up --wait --quiet-pull

      - name: Run online tests
        env:
          TEST_SCHEMA_URI: ${{ matrix.schema-uri }}
          TEST_DETECTION_RULES_URI: ${{ matrix.detection-rules-uri }}
        run: make online_tests

      - name: Stop Elastic Stack ${{ matrix.stack-version }}
        run: docker compose down

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - unit-tests
      - online-tests
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: make prereq

      - name: Build package
        run: make pkg_build

      - name: Install package
        run: make pkg_install

      - name: Try package
        run: make pkg_try

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@v1.5.0
        if: github.repository != 'elastic/geneve'
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          print_hash: true
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.5.0
        if: github.repository == 'elastic/geneve'
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          print_hash: true
